/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package laboratory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-03")
public class LaboratoryService {

  public interface Iface {

    public java.util.List<Examination> list_results_doc(java.lang.String exam_id, java.lang.String param) throws org.apache.thrift.TException;

    public java.util.List<Examination> list_results_pat(java.lang.String patient_id) throws org.apache.thrift.TException;

    public boolean order_exam(java.lang.String patient_id, java.lang.String exam_date, java.lang.String doctor_to_order, java.util.List<ExamRecord> exam_records) throws org.apache.thrift.TException;

    public boolean fill_results(java.lang.String exam_id) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void list_results_doc(java.lang.String exam_id, java.lang.String param, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Examination>> resultHandler) throws org.apache.thrift.TException;

    public void list_results_pat(java.lang.String patient_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Examination>> resultHandler) throws org.apache.thrift.TException;

    public void order_exam(java.lang.String patient_id, java.lang.String exam_date, java.lang.String doctor_to_order, java.util.List<ExamRecord> exam_records, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void fill_results(java.lang.String exam_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.util.List<Examination> list_results_doc(java.lang.String exam_id, java.lang.String param) throws org.apache.thrift.TException
    {
      send_list_results_doc(exam_id, param);
      return recv_list_results_doc();
    }

    public void send_list_results_doc(java.lang.String exam_id, java.lang.String param) throws org.apache.thrift.TException
    {
      list_results_doc_args args = new list_results_doc_args();
      args.setExam_id(exam_id);
      args.setParam(param);
      sendBase("list_results_doc", args);
    }

    public java.util.List<Examination> recv_list_results_doc() throws org.apache.thrift.TException
    {
      list_results_doc_result result = new list_results_doc_result();
      receiveBase(result, "list_results_doc");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "list_results_doc failed: unknown result");
    }

    public java.util.List<Examination> list_results_pat(java.lang.String patient_id) throws org.apache.thrift.TException
    {
      send_list_results_pat(patient_id);
      return recv_list_results_pat();
    }

    public void send_list_results_pat(java.lang.String patient_id) throws org.apache.thrift.TException
    {
      list_results_pat_args args = new list_results_pat_args();
      args.setPatient_id(patient_id);
      sendBase("list_results_pat", args);
    }

    public java.util.List<Examination> recv_list_results_pat() throws org.apache.thrift.TException
    {
      list_results_pat_result result = new list_results_pat_result();
      receiveBase(result, "list_results_pat");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "list_results_pat failed: unknown result");
    }

    public boolean order_exam(java.lang.String patient_id, java.lang.String exam_date, java.lang.String doctor_to_order, java.util.List<ExamRecord> exam_records) throws org.apache.thrift.TException
    {
      send_order_exam(patient_id, exam_date, doctor_to_order, exam_records);
      return recv_order_exam();
    }

    public void send_order_exam(java.lang.String patient_id, java.lang.String exam_date, java.lang.String doctor_to_order, java.util.List<ExamRecord> exam_records) throws org.apache.thrift.TException
    {
      order_exam_args args = new order_exam_args();
      args.setPatient_id(patient_id);
      args.setExam_date(exam_date);
      args.setDoctor_to_order(doctor_to_order);
      args.setExam_records(exam_records);
      sendBase("order_exam", args);
    }

    public boolean recv_order_exam() throws org.apache.thrift.TException
    {
      order_exam_result result = new order_exam_result();
      receiveBase(result, "order_exam");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "order_exam failed: unknown result");
    }

    public boolean fill_results(java.lang.String exam_id) throws org.apache.thrift.TException
    {
      send_fill_results(exam_id);
      return recv_fill_results();
    }

    public void send_fill_results(java.lang.String exam_id) throws org.apache.thrift.TException
    {
      fill_results_args args = new fill_results_args();
      args.setExam_id(exam_id);
      sendBase("fill_results", args);
    }

    public boolean recv_fill_results() throws org.apache.thrift.TException
    {
      fill_results_result result = new fill_results_result();
      receiveBase(result, "fill_results");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fill_results failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void list_results_doc(java.lang.String exam_id, java.lang.String param, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Examination>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      list_results_doc_call method_call = new list_results_doc_call(exam_id, param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class list_results_doc_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Examination>> {
      private java.lang.String exam_id;
      private java.lang.String param;
      public list_results_doc_call(java.lang.String exam_id, java.lang.String param, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Examination>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.exam_id = exam_id;
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("list_results_doc", org.apache.thrift.protocol.TMessageType.CALL, 0));
        list_results_doc_args args = new list_results_doc_args();
        args.setExam_id(exam_id);
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Examination> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_list_results_doc();
      }
    }

    public void list_results_pat(java.lang.String patient_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Examination>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      list_results_pat_call method_call = new list_results_pat_call(patient_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class list_results_pat_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Examination>> {
      private java.lang.String patient_id;
      public list_results_pat_call(java.lang.String patient_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Examination>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.patient_id = patient_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("list_results_pat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        list_results_pat_args args = new list_results_pat_args();
        args.setPatient_id(patient_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Examination> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_list_results_pat();
      }
    }

    public void order_exam(java.lang.String patient_id, java.lang.String exam_date, java.lang.String doctor_to_order, java.util.List<ExamRecord> exam_records, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      order_exam_call method_call = new order_exam_call(patient_id, exam_date, doctor_to_order, exam_records, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class order_exam_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String patient_id;
      private java.lang.String exam_date;
      private java.lang.String doctor_to_order;
      private java.util.List<ExamRecord> exam_records;
      public order_exam_call(java.lang.String patient_id, java.lang.String exam_date, java.lang.String doctor_to_order, java.util.List<ExamRecord> exam_records, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.patient_id = patient_id;
        this.exam_date = exam_date;
        this.doctor_to_order = doctor_to_order;
        this.exam_records = exam_records;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("order_exam", org.apache.thrift.protocol.TMessageType.CALL, 0));
        order_exam_args args = new order_exam_args();
        args.setPatient_id(patient_id);
        args.setExam_date(exam_date);
        args.setDoctor_to_order(doctor_to_order);
        args.setExam_records(exam_records);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_order_exam();
      }
    }

    public void fill_results(java.lang.String exam_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fill_results_call method_call = new fill_results_call(exam_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fill_results_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String exam_id;
      public fill_results_call(java.lang.String exam_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.exam_id = exam_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fill_results", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fill_results_args args = new fill_results_args();
        args.setExam_id(exam_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fill_results();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("list_results_doc", new list_results_doc());
      processMap.put("list_results_pat", new list_results_pat());
      processMap.put("order_exam", new order_exam());
      processMap.put("fill_results", new fill_results());
      return processMap;
    }

    public static class list_results_doc<I extends Iface> extends org.apache.thrift.ProcessFunction<I, list_results_doc_args> {
      public list_results_doc() {
        super("list_results_doc");
      }

      public list_results_doc_args getEmptyArgsInstance() {
        return new list_results_doc_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public list_results_doc_result getResult(I iface, list_results_doc_args args) throws org.apache.thrift.TException {
        list_results_doc_result result = new list_results_doc_result();
        result.success = iface.list_results_doc(args.exam_id, args.param);
        return result;
      }
    }

    public static class list_results_pat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, list_results_pat_args> {
      public list_results_pat() {
        super("list_results_pat");
      }

      public list_results_pat_args getEmptyArgsInstance() {
        return new list_results_pat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public list_results_pat_result getResult(I iface, list_results_pat_args args) throws org.apache.thrift.TException {
        list_results_pat_result result = new list_results_pat_result();
        result.success = iface.list_results_pat(args.patient_id);
        return result;
      }
    }

    public static class order_exam<I extends Iface> extends org.apache.thrift.ProcessFunction<I, order_exam_args> {
      public order_exam() {
        super("order_exam");
      }

      public order_exam_args getEmptyArgsInstance() {
        return new order_exam_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public order_exam_result getResult(I iface, order_exam_args args) throws org.apache.thrift.TException {
        order_exam_result result = new order_exam_result();
        result.success = iface.order_exam(args.patient_id, args.exam_date, args.doctor_to_order, args.exam_records);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class fill_results<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fill_results_args> {
      public fill_results() {
        super("fill_results");
      }

      public fill_results_args getEmptyArgsInstance() {
        return new fill_results_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public fill_results_result getResult(I iface, fill_results_args args) throws org.apache.thrift.TException {
        fill_results_result result = new fill_results_result();
        result.success = iface.fill_results(args.exam_id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("list_results_doc", new list_results_doc());
      processMap.put("list_results_pat", new list_results_pat());
      processMap.put("order_exam", new order_exam());
      processMap.put("fill_results", new fill_results());
      return processMap;
    }

    public static class list_results_doc<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, list_results_doc_args, java.util.List<Examination>> {
      public list_results_doc() {
        super("list_results_doc");
      }

      public list_results_doc_args getEmptyArgsInstance() {
        return new list_results_doc_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Examination>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Examination>>() { 
          public void onComplete(java.util.List<Examination> o) {
            list_results_doc_result result = new list_results_doc_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            list_results_doc_result result = new list_results_doc_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, list_results_doc_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Examination>> resultHandler) throws org.apache.thrift.TException {
        iface.list_results_doc(args.exam_id, args.param,resultHandler);
      }
    }

    public static class list_results_pat<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, list_results_pat_args, java.util.List<Examination>> {
      public list_results_pat() {
        super("list_results_pat");
      }

      public list_results_pat_args getEmptyArgsInstance() {
        return new list_results_pat_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Examination>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Examination>>() { 
          public void onComplete(java.util.List<Examination> o) {
            list_results_pat_result result = new list_results_pat_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            list_results_pat_result result = new list_results_pat_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, list_results_pat_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Examination>> resultHandler) throws org.apache.thrift.TException {
        iface.list_results_pat(args.patient_id,resultHandler);
      }
    }

    public static class order_exam<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, order_exam_args, java.lang.Boolean> {
      public order_exam() {
        super("order_exam");
      }

      public order_exam_args getEmptyArgsInstance() {
        return new order_exam_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            order_exam_result result = new order_exam_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            order_exam_result result = new order_exam_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, order_exam_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.order_exam(args.patient_id, args.exam_date, args.doctor_to_order, args.exam_records,resultHandler);
      }
    }

    public static class fill_results<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fill_results_args, java.lang.Boolean> {
      public fill_results() {
        super("fill_results");
      }

      public fill_results_args getEmptyArgsInstance() {
        return new fill_results_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            fill_results_result result = new fill_results_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            fill_results_result result = new fill_results_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fill_results_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.fill_results(args.exam_id,resultHandler);
      }
    }

  }

  public static class list_results_doc_args implements org.apache.thrift.TBase<list_results_doc_args, list_results_doc_args._Fields>, java.io.Serializable, Cloneable, Comparable<list_results_doc_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("list_results_doc_args");

    private static final org.apache.thrift.protocol.TField EXAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exam_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new list_results_doc_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new list_results_doc_argsTupleSchemeFactory();

    public java.lang.String exam_id; // required
    public java.lang.String param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXAM_ID((short)1, "exam_id"),
      PARAM((short)2, "param");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXAM_ID
            return EXAM_ID;
          case 2: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXAM_ID, new org.apache.thrift.meta_data.FieldMetaData("exam_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(list_results_doc_args.class, metaDataMap);
    }

    public list_results_doc_args() {
    }

    public list_results_doc_args(
      java.lang.String exam_id,
      java.lang.String param)
    {
      this();
      this.exam_id = exam_id;
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public list_results_doc_args(list_results_doc_args other) {
      if (other.isSetExam_id()) {
        this.exam_id = other.exam_id;
      }
      if (other.isSetParam()) {
        this.param = other.param;
      }
    }

    public list_results_doc_args deepCopy() {
      return new list_results_doc_args(this);
    }

    @Override
    public void clear() {
      this.exam_id = null;
      this.param = null;
    }

    public java.lang.String getExam_id() {
      return this.exam_id;
    }

    public list_results_doc_args setExam_id(java.lang.String exam_id) {
      this.exam_id = exam_id;
      return this;
    }

    public void unsetExam_id() {
      this.exam_id = null;
    }

    /** Returns true if field exam_id is set (has been assigned a value) and false otherwise */
    public boolean isSetExam_id() {
      return this.exam_id != null;
    }

    public void setExam_idIsSet(boolean value) {
      if (!value) {
        this.exam_id = null;
      }
    }

    public java.lang.String getParam() {
      return this.param;
    }

    public list_results_doc_args setParam(java.lang.String param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EXAM_ID:
        if (value == null) {
          unsetExam_id();
        } else {
          setExam_id((java.lang.String)value);
        }
        break;

      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EXAM_ID:
        return getExam_id();

      case PARAM:
        return getParam();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EXAM_ID:
        return isSetExam_id();
      case PARAM:
        return isSetParam();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof list_results_doc_args)
        return this.equals((list_results_doc_args)that);
      return false;
    }

    public boolean equals(list_results_doc_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_exam_id = true && this.isSetExam_id();
      boolean that_present_exam_id = true && that.isSetExam_id();
      if (this_present_exam_id || that_present_exam_id) {
        if (!(this_present_exam_id && that_present_exam_id))
          return false;
        if (!this.exam_id.equals(that.exam_id))
          return false;
      }

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetExam_id()) ? 131071 : 524287);
      if (isSetExam_id())
        hashCode = hashCode * 8191 + exam_id.hashCode();

      hashCode = hashCode * 8191 + ((isSetParam()) ? 131071 : 524287);
      if (isSetParam())
        hashCode = hashCode * 8191 + param.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(list_results_doc_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetExam_id()).compareTo(other.isSetExam_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExam_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exam_id, other.exam_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("list_results_doc_args(");
      boolean first = true;

      sb.append("exam_id:");
      if (this.exam_id == null) {
        sb.append("null");
      } else {
        sb.append(this.exam_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class list_results_doc_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public list_results_doc_argsStandardScheme getScheme() {
        return new list_results_doc_argsStandardScheme();
      }
    }

    private static class list_results_doc_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<list_results_doc_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, list_results_doc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXAM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.exam_id = iprot.readString();
                struct.setExam_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.param = iprot.readString();
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, list_results_doc_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exam_id != null) {
          oprot.writeFieldBegin(EXAM_ID_FIELD_DESC);
          oprot.writeString(struct.exam_id);
          oprot.writeFieldEnd();
        }
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          oprot.writeString(struct.param);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class list_results_doc_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public list_results_doc_argsTupleScheme getScheme() {
        return new list_results_doc_argsTupleScheme();
      }
    }

    private static class list_results_doc_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<list_results_doc_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, list_results_doc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetExam_id()) {
          optionals.set(0);
        }
        if (struct.isSetParam()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetExam_id()) {
          oprot.writeString(struct.exam_id);
        }
        if (struct.isSetParam()) {
          oprot.writeString(struct.param);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, list_results_doc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.exam_id = iprot.readString();
          struct.setExam_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.param = iprot.readString();
          struct.setParamIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class list_results_doc_result implements org.apache.thrift.TBase<list_results_doc_result, list_results_doc_result._Fields>, java.io.Serializable, Cloneable, Comparable<list_results_doc_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("list_results_doc_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new list_results_doc_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new list_results_doc_resultTupleSchemeFactory();

    public java.util.List<Examination> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Examination.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(list_results_doc_result.class, metaDataMap);
    }

    public list_results_doc_result() {
    }

    public list_results_doc_result(
      java.util.List<Examination> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public list_results_doc_result(list_results_doc_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Examination> __this__success = new java.util.ArrayList<Examination>(other.success.size());
        for (Examination other_element : other.success) {
          __this__success.add(new Examination(other_element));
        }
        this.success = __this__success;
      }
    }

    public list_results_doc_result deepCopy() {
      return new list_results_doc_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Examination> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Examination elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Examination>();
      }
      this.success.add(elem);
    }

    public java.util.List<Examination> getSuccess() {
      return this.success;
    }

    public list_results_doc_result setSuccess(java.util.List<Examination> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Examination>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof list_results_doc_result)
        return this.equals((list_results_doc_result)that);
      return false;
    }

    public boolean equals(list_results_doc_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(list_results_doc_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("list_results_doc_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class list_results_doc_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public list_results_doc_resultStandardScheme getScheme() {
        return new list_results_doc_resultStandardScheme();
      }
    }

    private static class list_results_doc_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<list_results_doc_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, list_results_doc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Examination>(_list16.size);
                  Examination _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new Examination();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, list_results_doc_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Examination _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class list_results_doc_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public list_results_doc_resultTupleScheme getScheme() {
        return new list_results_doc_resultTupleScheme();
      }
    }

    private static class list_results_doc_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<list_results_doc_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, list_results_doc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Examination _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, list_results_doc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Examination>(_list21.size);
            Examination _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new Examination();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class list_results_pat_args implements org.apache.thrift.TBase<list_results_pat_args, list_results_pat_args._Fields>, java.io.Serializable, Cloneable, Comparable<list_results_pat_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("list_results_pat_args");

    private static final org.apache.thrift.protocol.TField PATIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("patient_id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new list_results_pat_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new list_results_pat_argsTupleSchemeFactory();

    public java.lang.String patient_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATIENT_ID((short)1, "patient_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATIENT_ID
            return PATIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("patient_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(list_results_pat_args.class, metaDataMap);
    }

    public list_results_pat_args() {
    }

    public list_results_pat_args(
      java.lang.String patient_id)
    {
      this();
      this.patient_id = patient_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public list_results_pat_args(list_results_pat_args other) {
      if (other.isSetPatient_id()) {
        this.patient_id = other.patient_id;
      }
    }

    public list_results_pat_args deepCopy() {
      return new list_results_pat_args(this);
    }

    @Override
    public void clear() {
      this.patient_id = null;
    }

    public java.lang.String getPatient_id() {
      return this.patient_id;
    }

    public list_results_pat_args setPatient_id(java.lang.String patient_id) {
      this.patient_id = patient_id;
      return this;
    }

    public void unsetPatient_id() {
      this.patient_id = null;
    }

    /** Returns true if field patient_id is set (has been assigned a value) and false otherwise */
    public boolean isSetPatient_id() {
      return this.patient_id != null;
    }

    public void setPatient_idIsSet(boolean value) {
      if (!value) {
        this.patient_id = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PATIENT_ID:
        if (value == null) {
          unsetPatient_id();
        } else {
          setPatient_id((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PATIENT_ID:
        return getPatient_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PATIENT_ID:
        return isSetPatient_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof list_results_pat_args)
        return this.equals((list_results_pat_args)that);
      return false;
    }

    public boolean equals(list_results_pat_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_patient_id = true && this.isSetPatient_id();
      boolean that_present_patient_id = true && that.isSetPatient_id();
      if (this_present_patient_id || that_present_patient_id) {
        if (!(this_present_patient_id && that_present_patient_id))
          return false;
        if (!this.patient_id.equals(that.patient_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPatient_id()) ? 131071 : 524287);
      if (isSetPatient_id())
        hashCode = hashCode * 8191 + patient_id.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(list_results_pat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPatient_id()).compareTo(other.isSetPatient_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPatient_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patient_id, other.patient_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("list_results_pat_args(");
      boolean first = true;

      sb.append("patient_id:");
      if (this.patient_id == null) {
        sb.append("null");
      } else {
        sb.append(this.patient_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class list_results_pat_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public list_results_pat_argsStandardScheme getScheme() {
        return new list_results_pat_argsStandardScheme();
      }
    }

    private static class list_results_pat_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<list_results_pat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, list_results_pat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.patient_id = iprot.readString();
                struct.setPatient_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, list_results_pat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.patient_id != null) {
          oprot.writeFieldBegin(PATIENT_ID_FIELD_DESC);
          oprot.writeString(struct.patient_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class list_results_pat_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public list_results_pat_argsTupleScheme getScheme() {
        return new list_results_pat_argsTupleScheme();
      }
    }

    private static class list_results_pat_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<list_results_pat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, list_results_pat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPatient_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPatient_id()) {
          oprot.writeString(struct.patient_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, list_results_pat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.patient_id = iprot.readString();
          struct.setPatient_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class list_results_pat_result implements org.apache.thrift.TBase<list_results_pat_result, list_results_pat_result._Fields>, java.io.Serializable, Cloneable, Comparable<list_results_pat_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("list_results_pat_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new list_results_pat_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new list_results_pat_resultTupleSchemeFactory();

    public java.util.List<Examination> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Examination.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(list_results_pat_result.class, metaDataMap);
    }

    public list_results_pat_result() {
    }

    public list_results_pat_result(
      java.util.List<Examination> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public list_results_pat_result(list_results_pat_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Examination> __this__success = new java.util.ArrayList<Examination>(other.success.size());
        for (Examination other_element : other.success) {
          __this__success.add(new Examination(other_element));
        }
        this.success = __this__success;
      }
    }

    public list_results_pat_result deepCopy() {
      return new list_results_pat_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Examination> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Examination elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Examination>();
      }
      this.success.add(elem);
    }

    public java.util.List<Examination> getSuccess() {
      return this.success;
    }

    public list_results_pat_result setSuccess(java.util.List<Examination> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Examination>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof list_results_pat_result)
        return this.equals((list_results_pat_result)that);
      return false;
    }

    public boolean equals(list_results_pat_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(list_results_pat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("list_results_pat_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class list_results_pat_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public list_results_pat_resultStandardScheme getScheme() {
        return new list_results_pat_resultStandardScheme();
      }
    }

    private static class list_results_pat_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<list_results_pat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, list_results_pat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Examination>(_list24.size);
                  Examination _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new Examination();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, list_results_pat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Examination _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class list_results_pat_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public list_results_pat_resultTupleScheme getScheme() {
        return new list_results_pat_resultTupleScheme();
      }
    }

    private static class list_results_pat_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<list_results_pat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, list_results_pat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Examination _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, list_results_pat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Examination>(_list29.size);
            Examination _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new Examination();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class order_exam_args implements org.apache.thrift.TBase<order_exam_args, order_exam_args._Fields>, java.io.Serializable, Cloneable, Comparable<order_exam_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("order_exam_args");

    private static final org.apache.thrift.protocol.TField PATIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("patient_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField EXAM_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("exam_date", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DOCTOR_TO_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("doctor_to_order", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField EXAM_RECORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("exam_records", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new order_exam_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new order_exam_argsTupleSchemeFactory();

    public java.lang.String patient_id; // required
    public java.lang.String exam_date; // required
    public java.lang.String doctor_to_order; // required
    public java.util.List<ExamRecord> exam_records; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATIENT_ID((short)1, "patient_id"),
      EXAM_DATE((short)2, "exam_date"),
      DOCTOR_TO_ORDER((short)3, "doctor_to_order"),
      EXAM_RECORDS((short)4, "exam_records");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATIENT_ID
            return PATIENT_ID;
          case 2: // EXAM_DATE
            return EXAM_DATE;
          case 3: // DOCTOR_TO_ORDER
            return DOCTOR_TO_ORDER;
          case 4: // EXAM_RECORDS
            return EXAM_RECORDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("patient_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXAM_DATE, new org.apache.thrift.meta_data.FieldMetaData("exam_date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DOCTOR_TO_ORDER, new org.apache.thrift.meta_data.FieldMetaData("doctor_to_order", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXAM_RECORDS, new org.apache.thrift.meta_data.FieldMetaData("exam_records", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExamRecord.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(order_exam_args.class, metaDataMap);
    }

    public order_exam_args() {
    }

    public order_exam_args(
      java.lang.String patient_id,
      java.lang.String exam_date,
      java.lang.String doctor_to_order,
      java.util.List<ExamRecord> exam_records)
    {
      this();
      this.patient_id = patient_id;
      this.exam_date = exam_date;
      this.doctor_to_order = doctor_to_order;
      this.exam_records = exam_records;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public order_exam_args(order_exam_args other) {
      if (other.isSetPatient_id()) {
        this.patient_id = other.patient_id;
      }
      if (other.isSetExam_date()) {
        this.exam_date = other.exam_date;
      }
      if (other.isSetDoctor_to_order()) {
        this.doctor_to_order = other.doctor_to_order;
      }
      if (other.isSetExam_records()) {
        java.util.List<ExamRecord> __this__exam_records = new java.util.ArrayList<ExamRecord>(other.exam_records.size());
        for (ExamRecord other_element : other.exam_records) {
          __this__exam_records.add(new ExamRecord(other_element));
        }
        this.exam_records = __this__exam_records;
      }
    }

    public order_exam_args deepCopy() {
      return new order_exam_args(this);
    }

    @Override
    public void clear() {
      this.patient_id = null;
      this.exam_date = null;
      this.doctor_to_order = null;
      this.exam_records = null;
    }

    public java.lang.String getPatient_id() {
      return this.patient_id;
    }

    public order_exam_args setPatient_id(java.lang.String patient_id) {
      this.patient_id = patient_id;
      return this;
    }

    public void unsetPatient_id() {
      this.patient_id = null;
    }

    /** Returns true if field patient_id is set (has been assigned a value) and false otherwise */
    public boolean isSetPatient_id() {
      return this.patient_id != null;
    }

    public void setPatient_idIsSet(boolean value) {
      if (!value) {
        this.patient_id = null;
      }
    }

    public java.lang.String getExam_date() {
      return this.exam_date;
    }

    public order_exam_args setExam_date(java.lang.String exam_date) {
      this.exam_date = exam_date;
      return this;
    }

    public void unsetExam_date() {
      this.exam_date = null;
    }

    /** Returns true if field exam_date is set (has been assigned a value) and false otherwise */
    public boolean isSetExam_date() {
      return this.exam_date != null;
    }

    public void setExam_dateIsSet(boolean value) {
      if (!value) {
        this.exam_date = null;
      }
    }

    public java.lang.String getDoctor_to_order() {
      return this.doctor_to_order;
    }

    public order_exam_args setDoctor_to_order(java.lang.String doctor_to_order) {
      this.doctor_to_order = doctor_to_order;
      return this;
    }

    public void unsetDoctor_to_order() {
      this.doctor_to_order = null;
    }

    /** Returns true if field doctor_to_order is set (has been assigned a value) and false otherwise */
    public boolean isSetDoctor_to_order() {
      return this.doctor_to_order != null;
    }

    public void setDoctor_to_orderIsSet(boolean value) {
      if (!value) {
        this.doctor_to_order = null;
      }
    }

    public int getExam_recordsSize() {
      return (this.exam_records == null) ? 0 : this.exam_records.size();
    }

    public java.util.Iterator<ExamRecord> getExam_recordsIterator() {
      return (this.exam_records == null) ? null : this.exam_records.iterator();
    }

    public void addToExam_records(ExamRecord elem) {
      if (this.exam_records == null) {
        this.exam_records = new java.util.ArrayList<ExamRecord>();
      }
      this.exam_records.add(elem);
    }

    public java.util.List<ExamRecord> getExam_records() {
      return this.exam_records;
    }

    public order_exam_args setExam_records(java.util.List<ExamRecord> exam_records) {
      this.exam_records = exam_records;
      return this;
    }

    public void unsetExam_records() {
      this.exam_records = null;
    }

    /** Returns true if field exam_records is set (has been assigned a value) and false otherwise */
    public boolean isSetExam_records() {
      return this.exam_records != null;
    }

    public void setExam_recordsIsSet(boolean value) {
      if (!value) {
        this.exam_records = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PATIENT_ID:
        if (value == null) {
          unsetPatient_id();
        } else {
          setPatient_id((java.lang.String)value);
        }
        break;

      case EXAM_DATE:
        if (value == null) {
          unsetExam_date();
        } else {
          setExam_date((java.lang.String)value);
        }
        break;

      case DOCTOR_TO_ORDER:
        if (value == null) {
          unsetDoctor_to_order();
        } else {
          setDoctor_to_order((java.lang.String)value);
        }
        break;

      case EXAM_RECORDS:
        if (value == null) {
          unsetExam_records();
        } else {
          setExam_records((java.util.List<ExamRecord>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PATIENT_ID:
        return getPatient_id();

      case EXAM_DATE:
        return getExam_date();

      case DOCTOR_TO_ORDER:
        return getDoctor_to_order();

      case EXAM_RECORDS:
        return getExam_records();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PATIENT_ID:
        return isSetPatient_id();
      case EXAM_DATE:
        return isSetExam_date();
      case DOCTOR_TO_ORDER:
        return isSetDoctor_to_order();
      case EXAM_RECORDS:
        return isSetExam_records();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof order_exam_args)
        return this.equals((order_exam_args)that);
      return false;
    }

    public boolean equals(order_exam_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_patient_id = true && this.isSetPatient_id();
      boolean that_present_patient_id = true && that.isSetPatient_id();
      if (this_present_patient_id || that_present_patient_id) {
        if (!(this_present_patient_id && that_present_patient_id))
          return false;
        if (!this.patient_id.equals(that.patient_id))
          return false;
      }

      boolean this_present_exam_date = true && this.isSetExam_date();
      boolean that_present_exam_date = true && that.isSetExam_date();
      if (this_present_exam_date || that_present_exam_date) {
        if (!(this_present_exam_date && that_present_exam_date))
          return false;
        if (!this.exam_date.equals(that.exam_date))
          return false;
      }

      boolean this_present_doctor_to_order = true && this.isSetDoctor_to_order();
      boolean that_present_doctor_to_order = true && that.isSetDoctor_to_order();
      if (this_present_doctor_to_order || that_present_doctor_to_order) {
        if (!(this_present_doctor_to_order && that_present_doctor_to_order))
          return false;
        if (!this.doctor_to_order.equals(that.doctor_to_order))
          return false;
      }

      boolean this_present_exam_records = true && this.isSetExam_records();
      boolean that_present_exam_records = true && that.isSetExam_records();
      if (this_present_exam_records || that_present_exam_records) {
        if (!(this_present_exam_records && that_present_exam_records))
          return false;
        if (!this.exam_records.equals(that.exam_records))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPatient_id()) ? 131071 : 524287);
      if (isSetPatient_id())
        hashCode = hashCode * 8191 + patient_id.hashCode();

      hashCode = hashCode * 8191 + ((isSetExam_date()) ? 131071 : 524287);
      if (isSetExam_date())
        hashCode = hashCode * 8191 + exam_date.hashCode();

      hashCode = hashCode * 8191 + ((isSetDoctor_to_order()) ? 131071 : 524287);
      if (isSetDoctor_to_order())
        hashCode = hashCode * 8191 + doctor_to_order.hashCode();

      hashCode = hashCode * 8191 + ((isSetExam_records()) ? 131071 : 524287);
      if (isSetExam_records())
        hashCode = hashCode * 8191 + exam_records.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(order_exam_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPatient_id()).compareTo(other.isSetPatient_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPatient_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patient_id, other.patient_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetExam_date()).compareTo(other.isSetExam_date());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExam_date()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exam_date, other.exam_date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDoctor_to_order()).compareTo(other.isSetDoctor_to_order());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDoctor_to_order()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doctor_to_order, other.doctor_to_order);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetExam_records()).compareTo(other.isSetExam_records());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExam_records()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exam_records, other.exam_records);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("order_exam_args(");
      boolean first = true;

      sb.append("patient_id:");
      if (this.patient_id == null) {
        sb.append("null");
      } else {
        sb.append(this.patient_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exam_date:");
      if (this.exam_date == null) {
        sb.append("null");
      } else {
        sb.append(this.exam_date);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("doctor_to_order:");
      if (this.doctor_to_order == null) {
        sb.append("null");
      } else {
        sb.append(this.doctor_to_order);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exam_records:");
      if (this.exam_records == null) {
        sb.append("null");
      } else {
        sb.append(this.exam_records);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class order_exam_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public order_exam_argsStandardScheme getScheme() {
        return new order_exam_argsStandardScheme();
      }
    }

    private static class order_exam_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<order_exam_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, order_exam_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.patient_id = iprot.readString();
                struct.setPatient_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXAM_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.exam_date = iprot.readString();
                struct.setExam_dateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DOCTOR_TO_ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.doctor_to_order = iprot.readString();
                struct.setDoctor_to_orderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // EXAM_RECORDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.exam_records = new java.util.ArrayList<ExamRecord>(_list32.size);
                  ExamRecord _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new ExamRecord();
                    _elem33.read(iprot);
                    struct.exam_records.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setExam_recordsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, order_exam_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.patient_id != null) {
          oprot.writeFieldBegin(PATIENT_ID_FIELD_DESC);
          oprot.writeString(struct.patient_id);
          oprot.writeFieldEnd();
        }
        if (struct.exam_date != null) {
          oprot.writeFieldBegin(EXAM_DATE_FIELD_DESC);
          oprot.writeString(struct.exam_date);
          oprot.writeFieldEnd();
        }
        if (struct.doctor_to_order != null) {
          oprot.writeFieldBegin(DOCTOR_TO_ORDER_FIELD_DESC);
          oprot.writeString(struct.doctor_to_order);
          oprot.writeFieldEnd();
        }
        if (struct.exam_records != null) {
          oprot.writeFieldBegin(EXAM_RECORDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.exam_records.size()));
            for (ExamRecord _iter35 : struct.exam_records)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class order_exam_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public order_exam_argsTupleScheme getScheme() {
        return new order_exam_argsTupleScheme();
      }
    }

    private static class order_exam_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<order_exam_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, order_exam_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPatient_id()) {
          optionals.set(0);
        }
        if (struct.isSetExam_date()) {
          optionals.set(1);
        }
        if (struct.isSetDoctor_to_order()) {
          optionals.set(2);
        }
        if (struct.isSetExam_records()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPatient_id()) {
          oprot.writeString(struct.patient_id);
        }
        if (struct.isSetExam_date()) {
          oprot.writeString(struct.exam_date);
        }
        if (struct.isSetDoctor_to_order()) {
          oprot.writeString(struct.doctor_to_order);
        }
        if (struct.isSetExam_records()) {
          {
            oprot.writeI32(struct.exam_records.size());
            for (ExamRecord _iter36 : struct.exam_records)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, order_exam_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.patient_id = iprot.readString();
          struct.setPatient_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exam_date = iprot.readString();
          struct.setExam_dateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.doctor_to_order = iprot.readString();
          struct.setDoctor_to_orderIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.exam_records = new java.util.ArrayList<ExamRecord>(_list37.size);
            ExamRecord _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new ExamRecord();
              _elem38.read(iprot);
              struct.exam_records.add(_elem38);
            }
          }
          struct.setExam_recordsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class order_exam_result implements org.apache.thrift.TBase<order_exam_result, order_exam_result._Fields>, java.io.Serializable, Cloneable, Comparable<order_exam_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("order_exam_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new order_exam_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new order_exam_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(order_exam_result.class, metaDataMap);
    }

    public order_exam_result() {
    }

    public order_exam_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public order_exam_result(order_exam_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public order_exam_result deepCopy() {
      return new order_exam_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public order_exam_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof order_exam_result)
        return this.equals((order_exam_result)that);
      return false;
    }

    public boolean equals(order_exam_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(order_exam_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("order_exam_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class order_exam_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public order_exam_resultStandardScheme getScheme() {
        return new order_exam_resultStandardScheme();
      }
    }

    private static class order_exam_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<order_exam_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, order_exam_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, order_exam_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class order_exam_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public order_exam_resultTupleScheme getScheme() {
        return new order_exam_resultTupleScheme();
      }
    }

    private static class order_exam_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<order_exam_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, order_exam_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, order_exam_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fill_results_args implements org.apache.thrift.TBase<fill_results_args, fill_results_args._Fields>, java.io.Serializable, Cloneable, Comparable<fill_results_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fill_results_args");

    private static final org.apache.thrift.protocol.TField EXAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exam_id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fill_results_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fill_results_argsTupleSchemeFactory();

    public java.lang.String exam_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXAM_ID((short)1, "exam_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXAM_ID
            return EXAM_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXAM_ID, new org.apache.thrift.meta_data.FieldMetaData("exam_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fill_results_args.class, metaDataMap);
    }

    public fill_results_args() {
    }

    public fill_results_args(
      java.lang.String exam_id)
    {
      this();
      this.exam_id = exam_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fill_results_args(fill_results_args other) {
      if (other.isSetExam_id()) {
        this.exam_id = other.exam_id;
      }
    }

    public fill_results_args deepCopy() {
      return new fill_results_args(this);
    }

    @Override
    public void clear() {
      this.exam_id = null;
    }

    public java.lang.String getExam_id() {
      return this.exam_id;
    }

    public fill_results_args setExam_id(java.lang.String exam_id) {
      this.exam_id = exam_id;
      return this;
    }

    public void unsetExam_id() {
      this.exam_id = null;
    }

    /** Returns true if field exam_id is set (has been assigned a value) and false otherwise */
    public boolean isSetExam_id() {
      return this.exam_id != null;
    }

    public void setExam_idIsSet(boolean value) {
      if (!value) {
        this.exam_id = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EXAM_ID:
        if (value == null) {
          unsetExam_id();
        } else {
          setExam_id((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EXAM_ID:
        return getExam_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EXAM_ID:
        return isSetExam_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fill_results_args)
        return this.equals((fill_results_args)that);
      return false;
    }

    public boolean equals(fill_results_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_exam_id = true && this.isSetExam_id();
      boolean that_present_exam_id = true && that.isSetExam_id();
      if (this_present_exam_id || that_present_exam_id) {
        if (!(this_present_exam_id && that_present_exam_id))
          return false;
        if (!this.exam_id.equals(that.exam_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetExam_id()) ? 131071 : 524287);
      if (isSetExam_id())
        hashCode = hashCode * 8191 + exam_id.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(fill_results_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetExam_id()).compareTo(other.isSetExam_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExam_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exam_id, other.exam_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fill_results_args(");
      boolean first = true;

      sb.append("exam_id:");
      if (this.exam_id == null) {
        sb.append("null");
      } else {
        sb.append(this.exam_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fill_results_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fill_results_argsStandardScheme getScheme() {
        return new fill_results_argsStandardScheme();
      }
    }

    private static class fill_results_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<fill_results_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fill_results_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXAM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.exam_id = iprot.readString();
                struct.setExam_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fill_results_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exam_id != null) {
          oprot.writeFieldBegin(EXAM_ID_FIELD_DESC);
          oprot.writeString(struct.exam_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fill_results_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fill_results_argsTupleScheme getScheme() {
        return new fill_results_argsTupleScheme();
      }
    }

    private static class fill_results_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<fill_results_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fill_results_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetExam_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExam_id()) {
          oprot.writeString(struct.exam_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fill_results_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.exam_id = iprot.readString();
          struct.setExam_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fill_results_result implements org.apache.thrift.TBase<fill_results_result, fill_results_result._Fields>, java.io.Serializable, Cloneable, Comparable<fill_results_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fill_results_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fill_results_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fill_results_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fill_results_result.class, metaDataMap);
    }

    public fill_results_result() {
    }

    public fill_results_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fill_results_result(fill_results_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public fill_results_result deepCopy() {
      return new fill_results_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public fill_results_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fill_results_result)
        return this.equals((fill_results_result)that);
      return false;
    }

    public boolean equals(fill_results_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(fill_results_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fill_results_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fill_results_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fill_results_resultStandardScheme getScheme() {
        return new fill_results_resultStandardScheme();
      }
    }

    private static class fill_results_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<fill_results_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fill_results_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fill_results_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fill_results_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fill_results_resultTupleScheme getScheme() {
        return new fill_results_resultTupleScheme();
      }
    }

    private static class fill_results_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<fill_results_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fill_results_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fill_results_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
