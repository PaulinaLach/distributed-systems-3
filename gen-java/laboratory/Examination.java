/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package laboratory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-05-03")
public class Examination implements org.apache.thrift.TBase<Examination, Examination._Fields>, java.io.Serializable, Cloneable, Comparable<Examination> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Examination");

  private static final org.apache.thrift.protocol.TField EXAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exam_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PATIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("patient_id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EXAM_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("exam_date", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DOCTOR_TO_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("doctor_to_order", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField EXAM_RECORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("exam_records", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ExaminationStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ExaminationTupleSchemeFactory();

  public java.lang.String exam_id; // required
  public java.lang.String patient_id; // required
  public java.lang.String exam_date; // required
  public java.lang.String doctor_to_order; // required
  public java.util.List<ExamRecord> exam_records; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXAM_ID((short)1, "exam_id"),
    PATIENT_ID((short)2, "patient_id"),
    EXAM_DATE((short)3, "exam_date"),
    DOCTOR_TO_ORDER((short)4, "doctor_to_order"),
    EXAM_RECORDS((short)5, "exam_records");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXAM_ID
          return EXAM_ID;
        case 2: // PATIENT_ID
          return PATIENT_ID;
        case 3: // EXAM_DATE
          return EXAM_DATE;
        case 4: // DOCTOR_TO_ORDER
          return DOCTOR_TO_ORDER;
        case 5: // EXAM_RECORDS
          return EXAM_RECORDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXAM_ID, new org.apache.thrift.meta_data.FieldMetaData("exam_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PATIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("patient_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXAM_DATE, new org.apache.thrift.meta_data.FieldMetaData("exam_date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOCTOR_TO_ORDER, new org.apache.thrift.meta_data.FieldMetaData("doctor_to_order", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXAM_RECORDS, new org.apache.thrift.meta_data.FieldMetaData("exam_records", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExamRecord.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Examination.class, metaDataMap);
  }

  public Examination() {
  }

  public Examination(
    java.lang.String exam_id,
    java.lang.String patient_id,
    java.lang.String exam_date,
    java.lang.String doctor_to_order,
    java.util.List<ExamRecord> exam_records)
  {
    this();
    this.exam_id = exam_id;
    this.patient_id = patient_id;
    this.exam_date = exam_date;
    this.doctor_to_order = doctor_to_order;
    this.exam_records = exam_records;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Examination(Examination other) {
    if (other.isSetExam_id()) {
      this.exam_id = other.exam_id;
    }
    if (other.isSetPatient_id()) {
      this.patient_id = other.patient_id;
    }
    if (other.isSetExam_date()) {
      this.exam_date = other.exam_date;
    }
    if (other.isSetDoctor_to_order()) {
      this.doctor_to_order = other.doctor_to_order;
    }
    if (other.isSetExam_records()) {
      java.util.List<ExamRecord> __this__exam_records = new java.util.ArrayList<ExamRecord>(other.exam_records.size());
      for (ExamRecord other_element : other.exam_records) {
        __this__exam_records.add(new ExamRecord(other_element));
      }
      this.exam_records = __this__exam_records;
    }
  }

  public Examination deepCopy() {
    return new Examination(this);
  }

  @Override
  public void clear() {
    this.exam_id = null;
    this.patient_id = null;
    this.exam_date = null;
    this.doctor_to_order = null;
    this.exam_records = null;
  }

  public java.lang.String getExam_id() {
    return this.exam_id;
  }

  public Examination setExam_id(java.lang.String exam_id) {
    this.exam_id = exam_id;
    return this;
  }

  public void unsetExam_id() {
    this.exam_id = null;
  }

  /** Returns true if field exam_id is set (has been assigned a value) and false otherwise */
  public boolean isSetExam_id() {
    return this.exam_id != null;
  }

  public void setExam_idIsSet(boolean value) {
    if (!value) {
      this.exam_id = null;
    }
  }

  public java.lang.String getPatient_id() {
    return this.patient_id;
  }

  public Examination setPatient_id(java.lang.String patient_id) {
    this.patient_id = patient_id;
    return this;
  }

  public void unsetPatient_id() {
    this.patient_id = null;
  }

  /** Returns true if field patient_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPatient_id() {
    return this.patient_id != null;
  }

  public void setPatient_idIsSet(boolean value) {
    if (!value) {
      this.patient_id = null;
    }
  }

  public java.lang.String getExam_date() {
    return this.exam_date;
  }

  public Examination setExam_date(java.lang.String exam_date) {
    this.exam_date = exam_date;
    return this;
  }

  public void unsetExam_date() {
    this.exam_date = null;
  }

  /** Returns true if field exam_date is set (has been assigned a value) and false otherwise */
  public boolean isSetExam_date() {
    return this.exam_date != null;
  }

  public void setExam_dateIsSet(boolean value) {
    if (!value) {
      this.exam_date = null;
    }
  }

  public java.lang.String getDoctor_to_order() {
    return this.doctor_to_order;
  }

  public Examination setDoctor_to_order(java.lang.String doctor_to_order) {
    this.doctor_to_order = doctor_to_order;
    return this;
  }

  public void unsetDoctor_to_order() {
    this.doctor_to_order = null;
  }

  /** Returns true if field doctor_to_order is set (has been assigned a value) and false otherwise */
  public boolean isSetDoctor_to_order() {
    return this.doctor_to_order != null;
  }

  public void setDoctor_to_orderIsSet(boolean value) {
    if (!value) {
      this.doctor_to_order = null;
    }
  }

  public int getExam_recordsSize() {
    return (this.exam_records == null) ? 0 : this.exam_records.size();
  }

  public java.util.Iterator<ExamRecord> getExam_recordsIterator() {
    return (this.exam_records == null) ? null : this.exam_records.iterator();
  }

  public void addToExam_records(ExamRecord elem) {
    if (this.exam_records == null) {
      this.exam_records = new java.util.ArrayList<ExamRecord>();
    }
    this.exam_records.add(elem);
  }

  public java.util.List<ExamRecord> getExam_records() {
    return this.exam_records;
  }

  public Examination setExam_records(java.util.List<ExamRecord> exam_records) {
    this.exam_records = exam_records;
    return this;
  }

  public void unsetExam_records() {
    this.exam_records = null;
  }

  /** Returns true if field exam_records is set (has been assigned a value) and false otherwise */
  public boolean isSetExam_records() {
    return this.exam_records != null;
  }

  public void setExam_recordsIsSet(boolean value) {
    if (!value) {
      this.exam_records = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case EXAM_ID:
      if (value == null) {
        unsetExam_id();
      } else {
        setExam_id((java.lang.String)value);
      }
      break;

    case PATIENT_ID:
      if (value == null) {
        unsetPatient_id();
      } else {
        setPatient_id((java.lang.String)value);
      }
      break;

    case EXAM_DATE:
      if (value == null) {
        unsetExam_date();
      } else {
        setExam_date((java.lang.String)value);
      }
      break;

    case DOCTOR_TO_ORDER:
      if (value == null) {
        unsetDoctor_to_order();
      } else {
        setDoctor_to_order((java.lang.String)value);
      }
      break;

    case EXAM_RECORDS:
      if (value == null) {
        unsetExam_records();
      } else {
        setExam_records((java.util.List<ExamRecord>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case EXAM_ID:
      return getExam_id();

    case PATIENT_ID:
      return getPatient_id();

    case EXAM_DATE:
      return getExam_date();

    case DOCTOR_TO_ORDER:
      return getDoctor_to_order();

    case EXAM_RECORDS:
      return getExam_records();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case EXAM_ID:
      return isSetExam_id();
    case PATIENT_ID:
      return isSetPatient_id();
    case EXAM_DATE:
      return isSetExam_date();
    case DOCTOR_TO_ORDER:
      return isSetDoctor_to_order();
    case EXAM_RECORDS:
      return isSetExam_records();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Examination)
      return this.equals((Examination)that);
    return false;
  }

  public boolean equals(Examination that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_exam_id = true && this.isSetExam_id();
    boolean that_present_exam_id = true && that.isSetExam_id();
    if (this_present_exam_id || that_present_exam_id) {
      if (!(this_present_exam_id && that_present_exam_id))
        return false;
      if (!this.exam_id.equals(that.exam_id))
        return false;
    }

    boolean this_present_patient_id = true && this.isSetPatient_id();
    boolean that_present_patient_id = true && that.isSetPatient_id();
    if (this_present_patient_id || that_present_patient_id) {
      if (!(this_present_patient_id && that_present_patient_id))
        return false;
      if (!this.patient_id.equals(that.patient_id))
        return false;
    }

    boolean this_present_exam_date = true && this.isSetExam_date();
    boolean that_present_exam_date = true && that.isSetExam_date();
    if (this_present_exam_date || that_present_exam_date) {
      if (!(this_present_exam_date && that_present_exam_date))
        return false;
      if (!this.exam_date.equals(that.exam_date))
        return false;
    }

    boolean this_present_doctor_to_order = true && this.isSetDoctor_to_order();
    boolean that_present_doctor_to_order = true && that.isSetDoctor_to_order();
    if (this_present_doctor_to_order || that_present_doctor_to_order) {
      if (!(this_present_doctor_to_order && that_present_doctor_to_order))
        return false;
      if (!this.doctor_to_order.equals(that.doctor_to_order))
        return false;
    }

    boolean this_present_exam_records = true && this.isSetExam_records();
    boolean that_present_exam_records = true && that.isSetExam_records();
    if (this_present_exam_records || that_present_exam_records) {
      if (!(this_present_exam_records && that_present_exam_records))
        return false;
      if (!this.exam_records.equals(that.exam_records))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetExam_id()) ? 131071 : 524287);
    if (isSetExam_id())
      hashCode = hashCode * 8191 + exam_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetPatient_id()) ? 131071 : 524287);
    if (isSetPatient_id())
      hashCode = hashCode * 8191 + patient_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetExam_date()) ? 131071 : 524287);
    if (isSetExam_date())
      hashCode = hashCode * 8191 + exam_date.hashCode();

    hashCode = hashCode * 8191 + ((isSetDoctor_to_order()) ? 131071 : 524287);
    if (isSetDoctor_to_order())
      hashCode = hashCode * 8191 + doctor_to_order.hashCode();

    hashCode = hashCode * 8191 + ((isSetExam_records()) ? 131071 : 524287);
    if (isSetExam_records())
      hashCode = hashCode * 8191 + exam_records.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Examination other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetExam_id()).compareTo(other.isSetExam_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExam_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exam_id, other.exam_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPatient_id()).compareTo(other.isSetPatient_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPatient_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patient_id, other.patient_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExam_date()).compareTo(other.isSetExam_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExam_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exam_date, other.exam_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDoctor_to_order()).compareTo(other.isSetDoctor_to_order());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoctor_to_order()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doctor_to_order, other.doctor_to_order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExam_records()).compareTo(other.isSetExam_records());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExam_records()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exam_records, other.exam_records);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Examination(");
    boolean first = true;

    sb.append("exam_id:");
    if (this.exam_id == null) {
      sb.append("null");
    } else {
      sb.append(this.exam_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("patient_id:");
    if (this.patient_id == null) {
      sb.append("null");
    } else {
      sb.append(this.patient_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exam_date:");
    if (this.exam_date == null) {
      sb.append("null");
    } else {
      sb.append(this.exam_date);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("doctor_to_order:");
    if (this.doctor_to_order == null) {
      sb.append("null");
    } else {
      sb.append(this.doctor_to_order);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exam_records:");
    if (this.exam_records == null) {
      sb.append("null");
    } else {
      sb.append(this.exam_records);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExaminationStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ExaminationStandardScheme getScheme() {
      return new ExaminationStandardScheme();
    }
  }

  private static class ExaminationStandardScheme extends org.apache.thrift.scheme.StandardScheme<Examination> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Examination struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exam_id = iprot.readString();
              struct.setExam_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PATIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.patient_id = iprot.readString();
              struct.setPatient_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXAM_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exam_date = iprot.readString();
              struct.setExam_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DOCTOR_TO_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.doctor_to_order = iprot.readString();
              struct.setDoctor_to_orderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXAM_RECORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.exam_records = new java.util.ArrayList<ExamRecord>(_list0.size);
                ExamRecord _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new ExamRecord();
                  _elem1.read(iprot);
                  struct.exam_records.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setExam_recordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Examination struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.exam_id != null) {
        oprot.writeFieldBegin(EXAM_ID_FIELD_DESC);
        oprot.writeString(struct.exam_id);
        oprot.writeFieldEnd();
      }
      if (struct.patient_id != null) {
        oprot.writeFieldBegin(PATIENT_ID_FIELD_DESC);
        oprot.writeString(struct.patient_id);
        oprot.writeFieldEnd();
      }
      if (struct.exam_date != null) {
        oprot.writeFieldBegin(EXAM_DATE_FIELD_DESC);
        oprot.writeString(struct.exam_date);
        oprot.writeFieldEnd();
      }
      if (struct.doctor_to_order != null) {
        oprot.writeFieldBegin(DOCTOR_TO_ORDER_FIELD_DESC);
        oprot.writeString(struct.doctor_to_order);
        oprot.writeFieldEnd();
      }
      if (struct.exam_records != null) {
        oprot.writeFieldBegin(EXAM_RECORDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.exam_records.size()));
          for (ExamRecord _iter3 : struct.exam_records)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExaminationTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ExaminationTupleScheme getScheme() {
      return new ExaminationTupleScheme();
    }
  }

  private static class ExaminationTupleScheme extends org.apache.thrift.scheme.TupleScheme<Examination> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Examination struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetExam_id()) {
        optionals.set(0);
      }
      if (struct.isSetPatient_id()) {
        optionals.set(1);
      }
      if (struct.isSetExam_date()) {
        optionals.set(2);
      }
      if (struct.isSetDoctor_to_order()) {
        optionals.set(3);
      }
      if (struct.isSetExam_records()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetExam_id()) {
        oprot.writeString(struct.exam_id);
      }
      if (struct.isSetPatient_id()) {
        oprot.writeString(struct.patient_id);
      }
      if (struct.isSetExam_date()) {
        oprot.writeString(struct.exam_date);
      }
      if (struct.isSetDoctor_to_order()) {
        oprot.writeString(struct.doctor_to_order);
      }
      if (struct.isSetExam_records()) {
        {
          oprot.writeI32(struct.exam_records.size());
          for (ExamRecord _iter4 : struct.exam_records)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Examination struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.exam_id = iprot.readString();
        struct.setExam_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.patient_id = iprot.readString();
        struct.setPatient_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.exam_date = iprot.readString();
        struct.setExam_dateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.doctor_to_order = iprot.readString();
        struct.setDoctor_to_orderIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.exam_records = new java.util.ArrayList<ExamRecord>(_list5.size);
          ExamRecord _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new ExamRecord();
            _elem6.read(iprot);
            struct.exam_records.add(_elem6);
          }
        }
        struct.setExam_recordsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

